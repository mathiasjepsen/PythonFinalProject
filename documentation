DOCUMENTATION ABOUT UNCLEAR PARTS OF THE CODE



browser = webdriver.Chrome()

- webdriver import from selenium module
- webdriver is a tool for automating web application testing, and in particular to verify that they work as expected
- it makes direct calls to the browser using each chromeâ€™s native support for automation.
- in our example, we provided a playlist link which is then passed into browser.get() as a parameter. the webdriver automates UI of a link we have provided and allows us to interact with it and test if everything is in order.


browser.implicitly_wait(3)

- implicitly wait method tells webdriver to wait for certain amount of time before throwing "No such element exception". In the above example we set the time frame of three seconds. If the webdriver doesn't find the element, it will throw an exception

play_all_button = browser.find_element_by_xpath('//*[@class="style-scope ytd-playlist-sidebar-primary-info-renderer"]')

- find_element_by_xpath is a method which allows us to navigate through elements and attributes in an XML document. 
- typically used when you don't have suitable id or name attribute for the element you wish to locate
- // in the xpath stand for selecting the current node whereas * stands for any tagname

sleep()

- sleep() sets the condition to an exact time period to wait for next the part of the code to execute
- difference between wait() and sleep(): wait() method is used when we want to ensure that our browser will wait for a certain period of time before throwing an error or moving forward to looking for another element, whereas sleep() method is specifically used for setting a time period on a chunk of code and waiting for the next part of it to execute

title_url += word + "%20"

- %20 is encoding refference which stands for space between words.

f'string'

- works like a .format() method, however you can directly insert the names from the current scope in the format string

json.dumps()

- serialize object(process of converting abstract datatype to stream of bytes, in this case we serialize to JSON str)to a JSON formatted str using this conversion table.

search(q, typeSearch)

- search function takes query of an item you want to search for and a type of an item you want to search for as parameters. In this case, you are only
able to search for a track specific items because we need to be able to retrieve track object with items field.

response = request_song_info(input_q, input_artist)
    json = response.json()
    remote_song_info = None

for hit in json['response']['hits']:
    if input_artist.lower() in hit['result']['primary_artist']['name'].lower():
        remote_song_info = hit
        break

- If everything works fine, you will have now a response object that contains information about all the matches that were found in the API.
Due to the object shape we got from the request, we will have to iterate over the hits key in that object and look for a match using the artist_name variable.
If we successfully have a match in that object, it means that the song we look for is available in the API and is now available in the remote_song_info variable.

request_song_info()
 
- This method receives the song and artist name we extracted from the user input and sends a request to the Genius API

return [(track["name"], track["artists"][0]["name"]) for track in tracks]

- return a list comprenhension which consists of a track name and an artist name of each track provided by the search() function